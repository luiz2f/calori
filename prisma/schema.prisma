generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_Session_userId")
}

model VerificationRequest {
  id         String                @id @default(cuid())
  identifier String
  token      String                @unique
  expires    DateTime
  purpose    Verificarion_purpose? @default(EMAIL_VERIFICATION)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  @@unique([identifier, token])
}

model BodyInfo {
  id        String   @id @default(cuid())
  weight    Float
  height    Float
  bodyfat   Float
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Food {
  id            String         @id @default(cuid())
  name          String
  carb          Float
  protein       Float
  fat           Float
  satFat        Float
  fiber         Float
  userFood      Boolean        @default(false)
  userId        String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User?          @relation(fields: [userId], references: [id])
  unities       Unity[]
  mealListItems MealListItem[]

  @@index([userId], map: "idx_Food_userId")
}

model Unity {
  id             String         @id @default(cuid())
  foodId         String
  un             String
  unitMultiplier Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  food           Food           @relation(fields: [foodId], references: [id], onDelete: Cascade)
  mealListItems  MealListItem[]

  @@index([foodId], map: "idx_Unity_foodId")
}

model Diet {
  id        String   @id @default(cuid())
  name      String
  userId    String
  index     Int
  archived  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  meals     Meal[]

  @@index([userId], map: "idx_Diet_userId")
}

model Meal {
  id        String     @id @default(cuid())
  name      String
  time      String
  dietId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  diet      Diet       @relation(fields: [dietId], references: [id], onDelete: Cascade)
  mealList  MealList[]

  @@index([dietId], map: "idx_Meal_dietId")
}

model MealList {
  id            String         @id @default(cuid())
  name          String
  mealId        String
  index         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  meal          Meal           @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealListItems MealListItem[]

  @@index([mealId], map: "idx_MealList_mealId")
}

model MealListItem {
  id         String   @id @default(cuid())
  foodId     String
  unityId    String
  quantity   Float
  mealListId String
  index      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mealList   MealList @relation(fields: [mealListId], references: [id], onDelete: Cascade)
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  unity      Unity    @relation(fields: [unityId], references: [id], onDelete: Cascade)

  @@index([mealListId], map: "idx_MealListItem_mealListId")
  @@index([foodId], map: "idx_MealListItem_foodId")
  @@index([unityId], map: "idx_MealListItem_unityId")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           User_role? @default(USER)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Account        Account[]
  bodyInfo       BodyInfo?
  diets          Diet[]
  foods          Food[]
  sessions       Session[]
}

enum User_role {
  ADMIN
  USER
}

enum Verificarion_purpose {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
